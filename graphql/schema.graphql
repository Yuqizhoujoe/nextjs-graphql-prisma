type Query {
    getUser(id: Int): User!
    getUsers(query: String): [User]!
    getPost(id: Int!): Post!
    getPosts(query: String): [Post!]!
}

type Mutation {
    createUser(user: UserInput!): User!
    deleteUser(id: Int!): User!
    updateUser(id: Int!, data: UpdateUserInput!): User!
    createPost(post: PostInput!): Post!
    deletePost(id: Int!): [Post]!
    updatePost(id: Int!, data: UpdatePostInput!): Post!
}

type User {
    id: Int!
    name: String!
    email: String!
    password: String!
    age: Int
    posts: [Post]
}

scalar DateTime

type Post {
    id: Int!
    title: String!
    content: String
    published: Boolean!
    image: String
    user: User!
    createdAt: DateTime
}

input UserInput {
    id: Int
    name: String
    email: String!
    password: String!
    age: Int
}

input UpdateUserInput {
    name: String
    email: String
    password: String
    age: Int
}

input PostInput {
    title: String
    content: String
    published: Boolean
    image: String
    userId: Int!
}

input UpdatePostInput {
    title: String
    content: String
    published: Boolean
    image: String
}

enum MutationType {
    CREATE
    UPDATE
    DELETE
}
